
const layerDebugGrid = (engine, graphics) => {
    let prog = graphics.shader("mesh");
    let mesh = graphics.mesh.makeMesh(
        [2, 0, 38],
        null,
        new Float32Array([
            -100,    0,    0,
            +100,    0,    0,
               0, -100,    0,
               0, +100,    0,
               0,    0, -100,
               0,    0, +100,
            -100,    0, -100,
            +100,    0, -100,
            -100,    0,  -75,
            +100,    0,  -75,
            -100,    0,  -50,
            +100,    0,  -50,
            -100,    0,  -25,
            +100,    0,  -25,
            -100,    0,  +25,
            +100,    0,  +25,
            -100,    0,  +50,
            +100,    0,  +50,
            -100,    0,  +75,
            +100,    0,  +75,
            -100,    0, +100,
            +100,    0, +100,
            -100,    0, -100,
            -100,    0, +100,
             -75,    0, -100,
             -75,    0, +100,
             -50,    0, -100,
             -50,    0, +100,
             -25,    0, -100,
             -25,    0, +100,
             +25,    0, -100,
             +25,    0, +100,
             +50,    0, -100,
             +50,    0, +100,
             +75,    0, -100,
             +75,    0, +100,
            +100,    0, -100,
            +100,    0, +100,
        ]),
        new Uint8Array([
            255,   0,   0, 255,
            255, 128, 128, 255,
              0, 255,   0, 255,
            128, 255, 128, 255,
              0,   0, 255, 255,
            128, 128, 255, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
             64,  64,  64, 255,
        ]),
    );

    const begin = () => {
    };
    const end = () => {
    };
    const draw = () => {
        if(!engine.active()) {
            return;
        }

        prog.use();
        const gl = graphics.gl();
        gl.uniformMatrix4fv(prog.viewProj, false, graphics.viewProj());
        mesh.draw();
    };
    return {
        begin: begin,
        end: end,
        draw: draw,
    }
};
